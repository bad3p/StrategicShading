#define GROUPSIZE 256

//////////////////////////////////////////////////////////////////////////////////////

#include "Assets/Shaders/Simulation/Structs.compute"
#include "Assets/Shaders/Simulation/Uniforms.compute"
#include "Assets/Shaders/Simulation/Random.compute"

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel GenerateThreadIDs

int _outBufferSizeX;
int _outBufferSizeY;
int _outBufferSizeZ;
RWStructuredBuffer<int3> _outBuffer;

[numthreads(16,8,4)]
void GenerateThreadIDs(uint3 id : SV_DispatchThreadID)
{
    int index = int(id.z) * _outBufferSizeX *_outBufferSizeY + int(id.y) * _outBufferSizeX + int(id.x);
    if( index < _outBufferSizeX * _outBufferSizeY * _outBufferSizeZ )    
    {
        //_outBuffer[index] = int3(id);
        int temp;
        InterlockedAdd( _outBuffer[index].x, int(id.x) );
        InterlockedAdd( _outBuffer[index].y, int(id.y) );
        InterlockedAdd( _outBuffer[index].z, int(id.z) );  
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel GenerateRandomNumbers

uint _outRenderTextureWidth;
uint _outRenderTextureHeight;
RWTexture2D<float> _outRenderTexture;

[numthreads(GROUPSIZE,1,1)]
void GenerateRandomNumbers(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if( index < _outRenderTextureWidth * _outRenderTextureHeight )    
    {
        uint y = index / _outRenderTextureWidth;
        uint x = index - y * _outRenderTextureWidth;
        int2 xy = int2( x, y );    
        //_outRenderTexture[xy] = rngRange( 0.0, 1.0, rngIndex(index) );
        _outRenderTexture[xy] = 0.5 * ( 1.0 + rngNormal( rngIndex(index) ) );
    }
}