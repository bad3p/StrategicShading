
#ifndef _UNIFORMS_COMPUTE_INCLUDED
#define _UNIFORMS_COMPUTE_INCLUDED

#include "Assets/Shaders/Simulation/Structs.compute"

// ********************************************************************************
// linear congruential generator

int _lcgCount;
RWStructuredBuffer<int> _lcgState;

#define RAND_MAX_32 ((1U << 31) - 1)
#define RAND_MAX ((1U << 15) - 1)

int lcgIndex(int threadIndex)
{
    return threadIndex % _lcgCount;
}

int lcg(int lcgIndex)
{
    int result = 0;
    int prev = 1;
    int next = 1;

    while( result != prev )
    {
        prev = _lcgState[lcgIndex];
        next = ((prev * 214013 + 2531011) & RAND_MAX_32) >> 16;        
        InterlockedCompareExchange( _lcgState[lcgIndex], prev, next, result );
    }
    return next; 
}

float lcgRange(float min, float max, int lcgIndex)
{
    return min + (max - min) * float( lcg( lcgIndex ) ) / RAND_MAX; 
} 

#endif